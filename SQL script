-- BASIC
-- Retrieve the total number of orders placed.  
SELECT 
    COUNT(id) AS Total_Orders
FROM
    Orders;

-- Calculate the total revenue generated from pizza sales.
SELECT 
    ROUND(SUM(pizzas.price * orders_details.quantity), 2) AS total_revenue
FROM
  orders_details
        JOIN
pizzas ON pizzas.pizza_id = orders_details.pizza_id;

-- Identify the highest-priced pizza.
SELECT 
    pizza_types.name, pizzas.price AS highest_price
FROM
    pizza_types
        JOIN
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
ORDER BY price DESC
LIMIT 1;

-- Identify the most common pizza size ordered.
SELECT 
    pizzas.size,
    COUNT(orders_details.order_details_id) AS order_count
FROM
    pizzas
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizzas.size
ORDER BY order_count DESC
LIMIT 1;
 
-- List the top 5 most ordered pizza types along with their quantities.
SELECT 
    pizza_types.name, SUM(orders_details.quantity) AS quantities
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY quantities DESC
LIMIT 5;
-- Intermediate
-- Join the necessary tables to find the total quantity of each pizza category ordered.
SELECT 
    pizza_types.category,
    SUM(orders_details.quantity) AS quantities
FROM
    pizza_types
        JOIN
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY quantities DESC
LIMIT 5;

-- Determine the distribution of orders by hour of the day.
select hour(order_time) as hour, count(id) from orders
group by hour order by count(id) desc ;

-- Join relevant tables to find the category-wise distribution of pizzas.
SELECT 
    pizza_types.category,
    COUNT(pizza_types.pizza_type_id) AS count
FROM
    pizza_types
GROUP BY pizza_types.category;

-- Group the orders by date and calculate the average number of pizzas ordered per day.
 SELECT
    ROUND(AVG(quantity), 2) AS avg_quantity
FROM
    (SELECT 
        orders.order_date AS order_date,
            SUM(orders_details.quantity) AS quantity
    FROM
        orders
    JOIN orders_details ON orders_details.order_id = orders.id
    GROUP BY orders.order_date) AS order_quantity;

-- Determine the top 3 most ordered pizza types based on revenue.
-- quantity price name 
SELECT 
    pizza_types.name,
    round(SUM(orders_details.quantity * pizzas.price),2) AS Revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
        JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id
GROUP BY pizza_types.name
ORDER BY Revenue
LIMIT 3;

---- Advanced

-- Calculate the percentage contribution of each pizza type to total revenue
SELECT 
    pizza_types.category,
    ROUND(SUM(orders_details.quantity * pizzas.price) / (SELECT 
                    ROUND(SUM(orders_details.quantity * pizzas.price),
                                2) AS total_sales
                FROM
                    orders_details
                        JOIN
                    pizzas ON pizzas.pizza_id = orders_details.pizza_id) * 100,
            2) AS revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY revenue DESC;

-- Analyze the cumulative revenue generated over time.
select order_date,
sum(revenue) over(order by order_date)  as cumulative_revenue 
from 
(select orders.order_date, sum(pizzas.price*orders_details.quantity) as revenue 
from orders_details 
join pizzas on pizzas.pizza_id = orders_details.pizza_id
join orders on orders_details.order_id = orders.id 
group by orders.order_date) as rev_sales;

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.
SELECT name, revenue from 
		(select category,name, revenue , 
        rank() over (partition by category order by revenue) as rn from
				(select pizza_types.category,pizza_types.name,
				sum(orders_details.quantity*pizzas.price) as revenue from pizza_types 
			join pizzas 
            on pizzas.pizza_type_id = pizza_types.pizza_type_id 
			join orders_details 
            on orders_details.pizza_id = pizzas.pizza_id
			group by pizza_types.category,pizza_types.name) as cte) as cte2
			where rn<= 3;
